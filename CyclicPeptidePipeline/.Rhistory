fwdDnaSeq2
fwdNNK3seq = fwdDnaSeq[grepl(pattern = "^TGCA(.)*", fwdDnaSeq %>%
sread() %>%
as.character())]
gc()
con <- file.path("C:/Users/worms/Documents/2022.06.07 Drift Seq/90-666155004b/test",
"Cytoplasmic-NNK-Gen-1-LB_R1_001.fastq")
seq = FastqStreamer(con, 10000)
dnaSeq = yield(seq)
dnaSeq = dnaSeq[width(dnaSeq) > 145]
fwdDnaSeq <- dnaSeq[grepl(pattern = "TGGCTTCATTGCGAGCAAT", dnaSeq %>%
sread() %>%
as.character())]
fwdNNK3seq = fwdDnaSeq[grepl(pattern = "^TGCA(.)*", fwdDnaSeq %>%
sread() %>%
as.character())]
fwdNNK7seq =fwdDnaSeq[grepl(pattern = "^AAAA(.)*", fwdDnaSeq %>%
sread() %>%
as.character())]
revDnaSeq <- dnaSeq[grepl(pattern = "GTCGTAAGACAGACA", dnaSeq %>%
sread() %>%
as.character())]
revRevDnaSeq <- reverseComplement(revDnaSeq)
revRevDnaSeq
revRevDnaSeq %>% sread()
revDnaSeq
revDnaSeq %>% sread()
t = pairwiseAlignment(pattern = c("TGGCTTCATTGCGAGCAAT",fwdDnaSeq[1]))
t = pairwiseAlignment(pattern = c("TGGCTTCATTGCGAGCAAT","TGGCTTCATTGCGAGCAATAAA"))
t = pairwiseAlignment(pattern = c("TGGCTTCATTGCGAGCAAT","TGGCTTCATTGCGAGCAATAAA"), subject = "ADTFFFTGGCTTCATTGCGAGCAAT")
summary(t)
?pairwiseAlignment
pairwiseAlignment(pattern = c("TGGCTTCATTGCGAGCAAT","TGGCTTCATTGCGAGCAATAAA"), subject = "ADTFFFTGGCTTCATTGCGAGCAAT", type = "global")
pairwiseAlignment(pattern = c("aaTGGCTTCATTGCGAGCAAT","TGGCTTCATTGCGAGCAATAAA"), subject = "ADTFFFTGGCTTCATTGCGAGCAAT", type = "global")
pairwiseAlignment(pattern = c("aaTGGCTTCATTGCGAGCAAT","Prout"), subject = "ADTFFFTGGCTTCATTGCGAGCAAT", type = "global")
t
t[1]
t[2]
prout <- pairwiseAlignment(pattern = c("aaTGGCTTCATTGCGAGCAAT","Prout"), subject = "ADTFFFTGGCTTCATTGCGAGCAAT", type = "global")
prout
prout[2]
prout[3]
prout <- pairwiseAlignment(pattern = sread(fwdDnaSeq), subject = "ADTFFFTGGCTTCATTGCGAGCAAT", type = "global")
prout <- pairwiseAlignment(pattern = sread(fwdDnaSeq), subject = "TGGCTTCATTGCGAGCAAT", type = "global")
prout
prout[4]
prout[100]
class(prout)
prout <- pairwiseAlignment(pattern = "TGGCTTCATTGCGAGCAAT", subject = sread(fwdDnaSeq), type = "global")
prout <- pairwiseAlignment(pattern = c("TGGCTTCATTGCGAGCAAT"), subject = sread(fwdDnaSeq), type = "global")
prout <- pairwiseAlignment(pattern = sread(fwdDnaSeq),subject = "TGGCTTCATTGCGAGCAAT", type = "global")
prout
test = pairwiseAlignment(subject = "syzygy", pattern = "zyzzyx", type = "global")
test
test = pairwiseAlignment(subject = "syzygy", pattern = "zyzzyx", type = "local")
test
test = pairwiseAlignment(subject = "syzygy", pattern = "zyzzyx", type = "overlap")
test
summary(prout)
prout %>% pattern() %>% class()
pattern(prout)
pattern(prout)[2]
pattern(prout)[5]
pattern(prout)[3]
pattern(prout)[3][1]
pattern(prout)[3][1] %>% class(x = )
pattern(prout)[3][1] %>% class()
?pattern
fwdDnaSeq[1]
fwdDnaSeq[1] %>% sread()
fwdDnaSeq[1] %>% sread() %>% as.character()
pattern(prout)[1]
pattern(prout)[1] %>% mismatch()
pattern(prout)[1] %>% position()
pattern(prout)[1] -> x
pattern(prout)[1] %>% range()
pattern(prout)[1] %>% start()
pattern(prout) %>% start()
prout[6]
prout[5]
prout[5]
setwd(dir = "C:/Users/worms/Dropbox/PhD/PhD-Scripts/CyclicPeptidePipeline")
source("library.R")  #Install and/or load needed libraries
source("function.R")  #Functions used in the script
fileName <- file.path("C:/Users/worms/Documents/2022.06.07 Drift Seq/90-666155004b/test",
"Cytoplasmic-NNK-Gen-1-LB_R1_001.fastq")
destination <- file.path("C:/Users/worms/Desktop/Test peptide")
extract.peptides.fastq <- function(fileName, destination = sprintf("%s_subset", fl)) {
# open the connection
stream <- open(FastqStreamer(fileName))
on.exit(close(stream))
i = 1
repeat {
print(i)
i = i+1
dnaSeq = yield(stream)
# Filter the one that are way too small (<145 bp out of 150, about 0.5% of seq for
# NNK7)
dnaSeq = dnaSeq[width(dnaSeq) > 145]
# Get all the sequence that match the fwd pattern for intein
fwdDnaSeq <- dnaSeq[grepl(pattern = "TGGCTTCATTGCGAGCAAT", dnaSeq %>%
sread() %>%
as.character())]
# I will subset the NNK7 and NNK7
fwdNNK3seq = fwdDnaSeq[grepl(pattern = "^TGCA(.)*", fwdDnaSeq %>%
sread() %>%
as.character())]
fwdNNK7seq = fwdDnaSeq[grepl(pattern = "^AAAA(.)*", fwdDnaSeq %>%
sread() %>%
as.character())]
# And get the sequence of the peptides
fwdNNK3peptide = extract.peptide(dnaSeq = fwdNNK3seq, pattern = "TGGCTTCATTGCGAGCAAT",
pepSize = 12)
fwdNNK7peptide = extract.peptide(dnaSeq = fwdNNK7seq, pattern = "TGGCTTCATTGCGAGCAAT",
pepSize = 24)
# Get all the sequence that match the rev pattern for intein and take their reverse
# complement
revDnaSeq = dnaSeq[grepl(pattern = "GTCGTAAGACAGACA", dnaSeq %>%
sread() %>%
as.character())] %>%
reverseComplement()
# I do not have a barcode but I can get the size of the peptide by looking at the
# intein sequence anyway#Take their reverse complement: problem, we don't get
# barcode on those reads
frontPattern <- "TGGCTTCATTGCGAGCAAT"
backPattern <- "TGTCTGTCTTACG"
frontPos = pairwiseAlignment(pattern = sread(revDnaSeq), subject = frontPattern, type = "local") %>%
pattern() %>%
start() + nchar(frontPattern)
backPos = pairwiseAlignment(pattern = sread(revDnaSeq), subject = backPattern, type = "local") %>%
pattern() %>%
start()
pepLength = backPos - frontPos
revNNK3peptide = extract.peptide(dnaSeq = revDnaSeq[pepLength == 12], pattern = "TGGCTTCATTGCGAGCAAT",
pepSize = 12)
revNNK7peptide = extract.peptide(dnaSeq = revDnaSeq[pepLength == 24], pattern = "TGGCTTCATTGCGAGCAAT",
pepSize = 24)
rm(backPos, frontPos, pepLength)
# I'll store all the sequence in a ShortRead object
fwdNNK7peptide = ShortRead(sread = fwdNNK7peptide, id = BStringSet(rep("NNK7 fw",
length(fwdNNK7peptide))))
revNNK7peptide = ShortRead(sread = revNNK7peptide, id = BStringSet(rep("NNK7 rv",
length(revNNK7peptide))))
NNK7peptide <- append(fwdNNK7peptide, revNNK7peptide)
fwdNNK3peptide = ShortRead(sread = fwdNNK3peptide, id = BStringSet(rep("NNK3 fw",
length(fwdNNK3peptide))))
revNNK3peptide = ShortRead(sread = revNNK3peptide, id = BStringSet(rep("NNK3 rv",
length(revNNK3peptide))))
NNK3peptide <- append(fwdNNK3peptide, revNNK3peptide)
writeFasta(NNK7peptide, paste(destination, "NNK7peptide.fa", sep = "/"), mode = "a")  # The mode append it to a file if existing
writeFasta(NNK3peptide, paste(destination, "NNK3peptide.fa", sep = "/"), mode = "a")
}
}
dnaSeq = yield(stream)
# open the connection
stream <- open(FastqStreamer(fileName))
dnaSeq = yield(stream)
dnaSeq = yield(stream)
dnaSeq = yield(stream)
dnaSeq = yield(stream)
dnaSeq = yield(stream)
dnaSeq = dnaSeq[width(dnaSeq) > 145]
fwdDnaSeq <- dnaSeq[grepl(pattern = "TGGCTTCATTGCGAGCAAT", dnaSeq %>%
sread() %>%
as.character())]
fwdNNK3seq = fwdDnaSeq[grepl(pattern = "^TGCA(.)*", fwdDnaSeq %>%
sread() %>%
as.character())]
fwdNNK7seq = fwdDnaSeq[grepl(pattern = "^AAAA(.)*", fwdDnaSeq %>%
sread() %>%
as.character())]
fwdNNK3peptide = extract.peptide(dnaSeq = fwdNNK3seq, pattern = "TGGCTTCATTGCGAGCAAT",
pepSize = 12)
fwdNNK7peptide = extract.peptide(dnaSeq = fwdNNK7seq, pattern = "TGGCTTCATTGCGAGCAAT",
pepSize = 24)
revDnaSeq = dnaSeq[grepl(pattern = "GTCGTAAGACAGACA", dnaSeq %>%
sread() %>%
as.character())] %>%
reverseComplement()
frontPattern <- "TGGCTTCATTGCGAGCAAT"
backPattern <- "TGTCTGTCTTACG"
frontPos = pairwiseAlignment(pattern = sread(revDnaSeq), subject = frontPattern, type = "local") %>%
pattern() %>%
start() + nchar(frontPattern)
backPos = pairwiseAlignment(pattern = sread(revDnaSeq), subject = backPattern, type = "local") %>%
pattern() %>%
start()
pepLength = backPos - frontPos
revNNK3peptide = extract.peptide(dnaSeq = revDnaSeq[pepLength == 12], pattern = "TGGCTTCATTGCGAGCAAT",
pepSize = 12)
revNNK7peptide = extract.peptide(dnaSeq = revDnaSeq[pepLength == 24], pattern = "TGGCTTCATTGCGAGCAAT",
pepSize = 24)
rm(backPos, frontPos, pepLength)
fwdNNK7peptide = ShortRead(sread = fwdNNK7peptide, id = BStringSet(rep("NNK7 fw",
length(fwdNNK7peptide))))
revNNK7peptide = ShortRead(sread = revNNK7peptide, id = BStringSet(rep("NNK7 rv",
length(revNNK7peptide))))
NNK7peptide <- append(fwdNNK7peptide, revNNK7peptide)
fwdNNK3peptide = ShortRead(sread = fwdNNK3peptide, id = BStringSet(rep("NNK3 fw",
length(fwdNNK3peptide))))
revNNK3peptide = ShortRead(sread = revNNK3peptide, id = BStringSet(rep("NNK3 rv",
length(revNNK3peptide))))
NNK3peptide <- append(fwdNNK3peptide, revNNK3peptide)
fwdNNK7peptide = extract.peptide(dnaSeq = fwdNNK7seq, pattern = "TGGCTTCATTGCGAGCAAT",
pepSize = 24)
pattern = "TGGCTTCATTGCGAGCAAT"
pepSize = 24
targetAlignment = pairwiseAlignment(pattern = sread(fwdNNK7seq), subject = pattern,
type = "local")
pos = targetAlignment %>%
pattern() %>%
start() + nchar(pattern)  #This gives me the start of the peptide in each position
targetlist <- subseq(x = dnaSeq %>%
sread(), start = pos, width = pepSize)
pos[1]
pos[354952]
pos[354952]+24
pos[354592]+24
sread(fwdNNK7seq)[354952]
targetAlignment[354592]
sread(fwdNNK7seq)[354592]
sread(fwdNNK7seq)[354592] %>% seq())
sread(fwdNNK7seq)[354592] %>% as.character()
sensiblePos = pos + pepSize < 148
sensiblePos[354592]
sensiblePos %>% length())
sensiblePos %>% length()
sensiblePos %>% sum()
pos[sensiblePos]
pos[sensiblePos] %>% length()
extract.peptide = function(dnaSeq, pattern = "TGGCTTCATTGCGAGCAAT", pepSize = 12) {
targetAlignment = pairwiseAlignment(pattern = sread(dnaSeq), subject = pattern,
type = "local")  #Align the target
pos = targetAlignment %>%
pattern() %>%
start() + nchar(pattern)  #This gives me the start of the peptide in each position
sensiblePos = pos + pepSize < 148 #Added this for weird case where the pattern is present near the end
targetlist <- subseq(x = dnaSeq[sensiblePos] %>%
sread(), start = pos[sensiblePos], width = pepSize)
return(targetlist)
}
extract.peptides.fastq <- function(fileName, destination = sprintf("%s_subset", fl)) {
# open the connection
stream <- open(FastqStreamer(fileName))
on.exit(close(stream))
i = 1
ptm = proc.time()
repeat{
print(i)
print(proc.time() - ptm)
i = i+1
dnaSeq = yield(stream)
# Filter the one that are way too small (<145 bp out of 150, about 0.5% of seq for
# NNK7)
dnaSeq = dnaSeq[width(dnaSeq) > 145]
# Get all the sequence that match the fwd pattern for intein
fwdDnaSeq <- dnaSeq[grepl(pattern = "TGGCTTCATTGCGAGCAAT", dnaSeq %>%
sread() %>%
as.character())]
# I will subset the NNK7 and NNK7
fwdNNK3seq = fwdDnaSeq[grepl(pattern = "^TGCA(.)*", fwdDnaSeq %>%
sread() %>%
as.character())]
fwdNNK7seq = fwdDnaSeq[grepl(pattern = "^AAAA(.)*", fwdDnaSeq %>%
sread() %>%
as.character())]
# And get the sequence of the peptides
fwdNNK3peptide = extract.peptide(dnaSeq = fwdNNK3seq, pattern = "TGGCTTCATTGCGAGCAAT",
pepSize = 12)
fwdNNK7peptide = extract.peptide(dnaSeq = fwdNNK7seq, pattern = "TGGCTTCATTGCGAGCAAT",
pepSize = 24)
# Get all the sequence that match the rev pattern for intein and take their reverse
# complement
revDnaSeq = dnaSeq[grepl(pattern = "GTCGTAAGACAGACA", dnaSeq %>%
sread() %>%
as.character())] %>%
reverseComplement()
# I do not have a barcode but I can get the size of the peptide by looking at the
# intein sequence anyway#Take their reverse complement: problem, we don't get
# barcode on those reads
frontPattern <- "TGGCTTCATTGCGAGCAAT"
backPattern <- "TGTCTGTCTTACG"
frontPos = pairwiseAlignment(pattern = sread(revDnaSeq), subject = frontPattern, type = "local") %>%
pattern() %>%
start() + nchar(frontPattern)
backPos = pairwiseAlignment(pattern = sread(revDnaSeq), subject = backPattern, type = "local") %>%
pattern() %>%
start()
pepLength = backPos - frontPos
revNNK3peptide = extract.peptide(dnaSeq = revDnaSeq[pepLength == 12], pattern = "TGGCTTCATTGCGAGCAAT",
pepSize = 12)
revNNK7peptide = extract.peptide(dnaSeq = revDnaSeq[pepLength == 24], pattern = "TGGCTTCATTGCGAGCAAT",
pepSize = 24)
rm(backPos, frontPos, pepLength)
# I'll store all the sequence in a ShortRead object
fwdNNK7peptide = ShortRead(sread = fwdNNK7peptide, id = BStringSet(rep("NNK7 fw",
length(fwdNNK7peptide))))
revNNK7peptide = ShortRead(sread = revNNK7peptide, id = BStringSet(rep("NNK7 rv",
length(revNNK7peptide))))
NNK7peptide <- append(fwdNNK7peptide, revNNK7peptide)
fwdNNK3peptide = ShortRead(sread = fwdNNK3peptide, id = BStringSet(rep("NNK3 fw",
length(fwdNNK3peptide))))
revNNK3peptide = ShortRead(sread = revNNK3peptide, id = BStringSet(rep("NNK3 rv",
length(revNNK3peptide))))
NNK3peptide <- append(fwdNNK3peptide, revNNK3peptide)
writeFasta(NNK7peptide, paste(destination, "NNK7peptide.fa", sep = "/"), mode = "a")  # The mode append it to a file if existing
writeFasta(NNK3peptide, paste(destination, "NNK3peptide.fa", sep = "/"), mode = "a")
}
}
system.time(extract.peptides.fastq(fileName, destination))
# open the connection
stream <- open(FastqStreamer(fileName))
on.exit(close(stream))
# open the connection
stream <- open(FastqStreamer(fileName))
dnaSeq = yield(stream) %>% sys.time()
dnaSeq = yield(stream) %>% system.time()
yield(stream) %>% system.time()
dnaSeq = yield(stream)
system.time(dnaSeq[width(dnaSeq) > 145])
system.time(dnaSeq[grepl(pattern = "TGGCTTCATTGCGAGCAAT", dnaSeq %>%
sread() %>%
as.character())])
library(parallel)
detectCores()
nThreads <- detectCores()
clusterOfThreads <- makeCluster(nThreads-2)
registerDoParallel(clusterOfThreads, cores=nThreads-2)
?parallel
ibrary(help = "parallel")
library(help = "parallel")
library("doParallel")
library(doParallel)
install.packages("doParallel")
library(doParallel)
registerDoParallel(clusterOfThreads)
destination <- file.path("C:/Users/worms/Desktop/Test peptide2")
clusterApply(cl=clusterOfThreads,
fun=extract.peptides.fastq())
?clusterApply
clusterCall(cl=clusterOfThreads,
fun=extract.peptides.fastq())
clusterCall(cl=clusterOfThreads,
fun=extract.peptides.fastq(fileName,destination))
stopCluster(clusterOfThreads)
system.time(extract.peptide(dnaSeq = revDnaSeq[pepLength == 12], pattern = "TGGCTTCATTGCGAGCAAT",
pepSize = 12)
)
fileName <- file.path("C:/Users/worms/Documents/2022.06.07 Drift Seq/90-666155004b/test",
"Cytoplasmic-NNK-Gen-1-LB_R1_001.fastq")
destination <- file.path("C:/Users/worms/Desktop/Test peptide2")
# open the connection
stream <- open(FastqStreamer(fileName))
dnaSeq = yield(stream)
dnaSeq = dnaSeq[width(dnaSeq) > 145]
fwdDnaSeq <- dnaSeq[grepl(pattern = "TGGCTTCATTGCGAGCAAT", dnaSeq %>%
sread() %>%
as.character())]
fwdNNK3seq = fwdDnaSeq[grepl(pattern = "^TGCA(.)*", fwdDnaSeq %>%
sread() %>%
as.character())]
fwdNNK7seq = fwdDnaSeq[grepl(pattern = "^AAAA(.)*", fwdDnaSeq %>%
sread() %>%
as.character())]
fwdNNK3peptide = extract.peptide(dnaSeq = fwdNNK3seq, pattern = "TGGCTTCATTGCGAGCAAT",
pepSize = 12)
system.time(extract.peptide(dnaSeq = fwdNNK3seq, pattern = "TGGCTTCATTGCGAGCAAT",
pepSize = 12))
system.time(extract.peptide(dnaSeq = fwdNNK7seq, pattern = "TGGCTTCATTGCGAGCAAT",
pepSize = 24))
registerDoParallel(clusterOfThreads, cores=nThreads)
NNK7test <- clusterApply(cl=clusterOfThreads,
x = fwdNNK7seq,
fun=extract.peptide(pattern = "TGGCTTCATTGCGAGCAAT",
pepSize = 24))
NNK7test <- clusterApply(cl=clusterOfThreads,
x = fwdNNK7seq,
fun=extract.peptide(dnaSeq = x, pattern = "TGGCTTCATTGCGAGCAAT",
pepSize = 24))
NNK7test <- clusterApply(cl=clusterOfThreads,
x = fwdNNK7seq,
fun=extract.peptide(., pattern = "TGGCTTCATTGCGAGCAAT",
pepSize = 24))
extract.peptide = function(dnaSeq, pattern = "TGGCTTCATTGCGAGCAAT", pepSize = 24) {
targetAlignment = pairwiseAlignment(pattern = sread(dnaSeq), subject = pattern,
type = "local")  #Align the target
pos = targetAlignment %>%
pattern() %>%
start() + nchar(pattern)  #This gives me the start of the peptide in each position
sensiblePos = pos + pepSize < 148 #Added this for weird case where the pattern is present near the end
targetlist <- subseq(x = dnaSeq[sensiblePos] %>%
sread(), start = pos[sensiblePos], width = pepSize)
return(targetlist)
}
NNK7test <- clusterApply(cl=clusterOfThreads,
x = fwdNNK7seq,
fun=extract.peptide())
dnaSeq = fwdNNK7seq
dnaSeq[[1]]
dnaSeq <- sread(dnaSeq)
extract.peptide = function(dnaSeq, pattern = "TGGCTTCATTGCGAGCAAT", pepSize = 24) {
targetAlignment = pairwiseAlignment(pattern = dnaSeq, subject = pattern,
type = "local")  #Align the target
pos = targetAlignment %>%
pattern() %>%
start() + nchar(pattern)  #This gives me the start of the peptide in each position
sensiblePos = pos + pepSize < 148 #Added this for weird case where the pattern is present near the end
targetlist <- subseq(x = dnaSeq[sensiblePos], start = pos[sensiblePos], width = pepSize)
return(targetlist)
}
NNK7test <- clusterApply(cl=clusterOfThreads,
x = dnaSeq,
fun=extract.peptide())
dnaSeq[[1]]
dnaSeq[[2]]
extract.peptide = function(dnaSeq, pattern = "TGGCTTCATTGCGAGCAAT", pepSize = 24) {
targetAlignment = pairwiseAlignment(pattern = dnaSeq, subject = pattern,
type = "local")  #Align the target
pos = targetAlignment %>%
pattern() %>%
start() + nchar(pattern)  #This gives me the start of the peptide in each position
sensiblePos = pos + pepSize < 148 #Added this for weird case where the pattern is present near the end
targetlist <- subseq(x = dnaSeq[sensiblePos], start = pos[sensiblePos], width = pepSize)
return(targetlist)
}
extract.peptide = function(dnaSeq) {
pattern = "TGGCTTCATTGCGAGCAAT"
pepSize = 2
targetAlignment = pairwiseAlignment(pattern = dnaSeq, subject = pattern,
type = "local")  #Align the target
pos = targetAlignment %>%
pattern() %>%
start() + nchar(pattern)  #This gives me the start of the peptide in each position
sensiblePos = pos + pepSize < 148 #Added this for weird case where the pattern is present near the end
targetlist <- subseq(x = dnaSeq[sensiblePos], start = pos[sensiblePos], width = pepSize)
return(targetlist)
}
extract.peptide = function(dnaSeq) {
pattern = "TGGCTTCATTGCGAGCAAT"
pepSize = 24
targetAlignment = pairwiseAlignment(pattern = dnaSeq, subject = pattern,
type = "local")  #Align the target
pos = targetAlignment %>%
pattern() %>%
start() + nchar(pattern)  #This gives me the start of the peptide in each position
sensiblePos = pos + pepSize < 148 #Added this for weird case where the pattern is present near the end
targetlist <- subseq(x = dnaSeq[sensiblePos], start = pos[sensiblePos], width = pepSize)
return(targetlist)
}
NNK7test <- clusterApply(cl = clusterOfThreads,
x = dnaSeq,
fun = extract.peptide())
NNKtest <- extract.peptide(dnaSeq)
NNKtest
NNKtest <- extract.peptide(dnaSeq[[1]])
NNKtest
NNKtest <- sapply(X = dnaSeq, FUN = extract.peptide())
test2 <- dnaSeq[10]
test2
test2 <- dnaSeq[1:10]
test2
extract.peptide(test2)
NNKtest <- sapply(X = test2, FUN = extract.peptide())
extract.peptide = function(test) {
dnaSeq = test
pattern = "TGGCTTCATTGCGAGCAAT"
pepSize = 24
targetAlignment = pairwiseAlignment(pattern = dnaSeq, subject = pattern,
type = "local")  #Align the target
pos = targetAlignment %>%
pattern() %>%
start() + nchar(pattern)  #This gives me the start of the peptide in each position
sensiblePos = pos + pepSize < 148 #Added this for weird case where the pattern is present near the end
targetlist <- subseq(x = dnaSeq[sensiblePos], start = pos[sensiblePos], width = pepSize)
return(targetlist)
}
NNKtest <- sapply(X = test2, FUN = extract.peptide())
NNKtest <- lµapply(X = test2, FUN = extract.peptide())
NNKtest <- lapply(X = test2, FUN = extract.peptide())
NNKtest <- apply(X = test2, FUN = extract.peptide())
test2
randomizeSeq <- function(mystring){
# split the string into characters
myChars <- unlist(strsplit(as.character(mystring),''))
# randomize the order of characters
random.myChars <- sample(myChars,length(myChars))
# concatenate them back into a string and return the result
DNAStringSet(paste(random.myChars,collapse=''))
}
test3 <- sapply(test2, randomizeSeq)
test3
test3 <- sapply(test2, extract.peptide())
test3 <- sapply(test2, extract.peptide
)
test3
test3 <- lapply(test2, extract.peptide)
extract.peptide = function(dnaSeq,pattern = "TGGCTTCATTGCGAGCAAT", pepSize = 24) {
targetAlignment = pairwiseAlignment(pattern = dnaSeq, subject = pattern,
type = "local")  #Align the target
pos = targetAlignment %>%
pattern() %>%
start() + nchar(pattern)  #This gives me the start of the peptide in each position
sensiblePos = pos + pepSize < 148 #Added this for weird case where the pattern is present near the end
targetlist <- subseq(x = dnaSeq[sensiblePos], start = pos[sensiblePos], width = pepSize)
return(targetlist)
}
test3 <- sapply(test2, extract.peptide)
test3
extract.peptide(test2)
NNK7test <- clusterApply(cl = clusterOfThreads,
x = test2,
fun = extract.peptide)
