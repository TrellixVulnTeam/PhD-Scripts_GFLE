dim.names[[1]] <- lists$Index[1:nrow(lists)]
dim.names[[2]] <- dim.names[[2]][-1]
##Create an empty matrix
data.matrix <- matrix(data = NA, nrow = nrow(lists), ncol = ncol(lists)-1, dimnames = dim.names)
#Populate the matrix
for(i in seq_len(nrow(data.matrix))){
for(j in seq_len(ncol(data.matrix))){
data.matrix[i,j] <- lists$Index[i] %in% lists[j+1][[1]]
}
}
## Save the matrix
write.csv(data.matrix, file = paste(folder.loc,"DM_matrix.csv", sep ="/")
write.csv(data.matrix, file = paste(folderLoc,"DM_matrix.csv", sep ="/"))
paste(folderLoc,"DM_matrix.csv", sep ="/")
folderLoc <- "C:/Users/worms/Downloads"
## Where your file is
folderLoc <- "C:/Users/worms/Downloads"
## Load up the spreadsheet
lists <- read_xlsx(paste(folderLoc,"DM_interaction.xlsx", sep ="/"))
## Load the prot names as row and colnames
dim.names <- dimnames(lists)
dim.names[[1]] <- lists$Index[1:nrow(lists)]
dim.names[[2]] <- dim.names[[2]][-1]
##Create an empty matrix
data.matrix <- matrix(data = NA, nrow = nrow(lists), ncol = ncol(lists)-1, dimnames = dim.names)
#Populate the matrix
for(i in seq_len(nrow(data.matrix))){
for(j in seq_len(ncol(data.matrix))){
data.matrix[i,j] <- lists$Index[i] %in% lists[j+1][[1]]
}
}
write.csv(data.matrix, file = paste(folderLoc,"DM_matrix.csv", sep ="/"))
data.df <- data.frame(protInterest = as.character(),
protInteractor = as.character())
for(i in seq_along(lists$Index)){
for(j in seq_along(lists)[-1]){
if(lists$Index[i] %in% lists[j][[1]]){
data.df <- rbind(data.df,
c(lists$Index[i],colnames(lists)[j]))
}
}
}
colnames(data.df) <- c("protInterest","protInteractor")
write.csv(data.df, file = paste(folderLoc,"DM_df.csv", sep ="/"))
data.df %>% filter(protInterest == "O00555")
data.df %>% filter(protInteractor == "ZBTB16")
table(data.df)
lists$Index %in% data.df$protInterest
# Some of your PoI aren't in the interaction list and so aren't in data.df. They are:
vector <- !(lists$Index %in% data.df$protInterest)
vector
lists$Index[vector]
library(platetools)  #Needed to play with plates a bit more easily
num_to_well()
?num_to_well
num_to_well(1:96, plate = 96)
?gsub
num_to_well(1:96, plate = 96) %>%
gsub("10","100",.)
library(tidyverse)  #General tidy stuff
library(readxl)  #Use to read the excel file
library(openxlsx)  #USed to write the tidy data to
library(platetools)  #Needed to play with plates a bit more easily
num_to_well(1:96, plate = 96) %>%
gsub("10","100",.)
num_to_well(1:96, plate = 96) %>%
gsub("10","100",.) %>% str_remove(.,"0")
wellID = num_to_well(1:96, plate = 96) %>%
gsub("0$","00",.)
num_to_well(1:96, plate = 96) %>%
gsub("0$","00",.) %>% # To fix the naming, add a zero after 10, then remove one zero from each well
str_remove(.,"0")
num_to_well(1:384, plate = 384) %>%
gsub("0$","00",.) %>% # To fix the naming, add a zero after 10, then remove one zero from each well
str_remove(.,"0")
?anova
?Anova
??Anova
?aov
library(callr)
install.packages("car")
#This is just to install of the libraries I need for my script.
my_packages <- c("tidyverse", "Biostrings", "ShortRead", "edgeR", "formatR")                                        # Specify your packages
not_installed <- my_packages[!(my_packages %in% installed.packages()[ , "Package"])]    # Extract not installed packages
if(length(not_installed)) install.packages(not_installed)                               # Install not installed packages
rm(my_packages, not_installed)
library(tidyverse)
library(Biostrings)
library(ShortRead)
library(formatR) #Automatically clean code
seq(... =)
?seq()
con <- file.path("C:/Users/worms/Documents/2022.06.07 Drift Seq/90-666155004b/test",
"Cytoplasmic-NNK-Gen-1-LB_R1_001.fastq")
seq = FastqStreamer(con, 10000)
dnaSeq = yield(seq)
dnaSeq = dnaSeq[width(dnaSeq) > 145]
# Get all the sequence that match the fwd pattern for intein
fwdPat = "TGGCTTCATTGCGAGCAAT"
fwd = grepl(pattern = fwdPat, dnaSeq %>%
sread() %>%
as.character())
fwdDnaSeq <- dnaSeq[fwd]
revPat = "GTCGTAAGACAGACA"
rev = grepl(pattern = revPat, dnaSeq %>%
sread() %>%
as.character())
revDnaSeq <- dnaSeq[rev]
rev = grepl(pattern = revpat, DNAString %>%
as.character())
revString <- DNAString[rev]
# get all seq not containing either pat or revpat
restString <- DNAString[(!(fwd | rev))]
#Try subsetting the sequence of the peptide
fwdDnaSeq2 <- sread(fwdDnaSeq)
fwdDnaSeq[1]
fwdDnaSeq2
fwdDnaSeq2 %>% head()
fwdDnaSeq2 %>% head(n = 1000)
?head()
?head
fwdDnaSeq2 %>% head(., n = 50)
fwdDnaSeq2[6]
NNK3Seq = grepl(pattern = "^TGCA(.)*", fwdDnaSeq %>%
sread() %>%
as.character())
NNK3Seq2 = fwdDnaSeq[NNK3Seq]
NNK3SeqList = grepl(pattern = "^TGCA(.)*", fwdDnaSeq %>%
sread() %>%
as.character())
fwdDnaSeq
fwdDnaSeq2
fwdNNK3seq = fwdDnaSeq[grepl(pattern = "^TGCA(.)*", fwdDnaSeq %>%
sread() %>%
as.character())]
gc()
con <- file.path("C:/Users/worms/Documents/2022.06.07 Drift Seq/90-666155004b/test",
"Cytoplasmic-NNK-Gen-1-LB_R1_001.fastq")
seq = FastqStreamer(con, 10000)
dnaSeq = yield(seq)
dnaSeq = dnaSeq[width(dnaSeq) > 145]
fwdDnaSeq <- dnaSeq[grepl(pattern = "TGGCTTCATTGCGAGCAAT", dnaSeq %>%
sread() %>%
as.character())]
fwdNNK3seq = fwdDnaSeq[grepl(pattern = "^TGCA(.)*", fwdDnaSeq %>%
sread() %>%
as.character())]
fwdNNK7seq =fwdDnaSeq[grepl(pattern = "^AAAA(.)*", fwdDnaSeq %>%
sread() %>%
as.character())]
revDnaSeq <- dnaSeq[grepl(pattern = "GTCGTAAGACAGACA", dnaSeq %>%
sread() %>%
as.character())]
revRevDnaSeq <- reverseComplement(revDnaSeq)
revRevDnaSeq
revRevDnaSeq %>% sread()
revDnaSeq
revDnaSeq %>% sread()
t = pairwiseAlignment(pattern = c("TGGCTTCATTGCGAGCAAT",fwdDnaSeq[1]))
t = pairwiseAlignment(pattern = c("TGGCTTCATTGCGAGCAAT","TGGCTTCATTGCGAGCAATAAA"))
t = pairwiseAlignment(pattern = c("TGGCTTCATTGCGAGCAAT","TGGCTTCATTGCGAGCAATAAA"), subject = "ADTFFFTGGCTTCATTGCGAGCAAT")
summary(t)
?pairwiseAlignment
pairwiseAlignment(pattern = c("TGGCTTCATTGCGAGCAAT","TGGCTTCATTGCGAGCAATAAA"), subject = "ADTFFFTGGCTTCATTGCGAGCAAT", type = "global")
pairwiseAlignment(pattern = c("aaTGGCTTCATTGCGAGCAAT","TGGCTTCATTGCGAGCAATAAA"), subject = "ADTFFFTGGCTTCATTGCGAGCAAT", type = "global")
pairwiseAlignment(pattern = c("aaTGGCTTCATTGCGAGCAAT","Prout"), subject = "ADTFFFTGGCTTCATTGCGAGCAAT", type = "global")
t
t[1]
t[2]
prout <- pairwiseAlignment(pattern = c("aaTGGCTTCATTGCGAGCAAT","Prout"), subject = "ADTFFFTGGCTTCATTGCGAGCAAT", type = "global")
prout
prout[2]
prout[3]
prout <- pairwiseAlignment(pattern = sread(fwdDnaSeq), subject = "ADTFFFTGGCTTCATTGCGAGCAAT", type = "global")
prout <- pairwiseAlignment(pattern = sread(fwdDnaSeq), subject = "TGGCTTCATTGCGAGCAAT", type = "global")
prout
prout[4]
prout[100]
class(prout)
prout <- pairwiseAlignment(pattern = "TGGCTTCATTGCGAGCAAT", subject = sread(fwdDnaSeq), type = "global")
prout <- pairwiseAlignment(pattern = c("TGGCTTCATTGCGAGCAAT"), subject = sread(fwdDnaSeq), type = "global")
prout <- pairwiseAlignment(pattern = sread(fwdDnaSeq),subject = "TGGCTTCATTGCGAGCAAT", type = "global")
prout
test = pairwiseAlignment(subject = "syzygy", pattern = "zyzzyx", type = "global")
test
test = pairwiseAlignment(subject = "syzygy", pattern = "zyzzyx", type = "local")
test
test = pairwiseAlignment(subject = "syzygy", pattern = "zyzzyx", type = "overlap")
test
summary(prout)
prout %>% pattern() %>% class()
pattern(prout)
pattern(prout)[2]
pattern(prout)[5]
pattern(prout)[3]
pattern(prout)[3][1]
pattern(prout)[3][1] %>% class(x = )
pattern(prout)[3][1] %>% class()
?pattern
fwdDnaSeq[1]
fwdDnaSeq[1] %>% sread()
fwdDnaSeq[1] %>% sread() %>% as.character()
pattern(prout)[1]
pattern(prout)[1] %>% mismatch()
pattern(prout)[1] %>% position()
pattern(prout)[1] -> x
pattern(prout)[1] %>% range()
pattern(prout)[1] %>% start()
pattern(prout) %>% start()
prout[6]
prout[5]
prout[5]
# Specify your packages
myPackages <- c("tidyverse", #General data wrangling
"Biostrings", #Managing biological sequences
"ShortRead", #Read and process large fastq of short file
"edgeR",
"formatR", #used to clean code
"stringi") #used to subset code
notInstalled <- myPackages[!(myPackages %in% installed.packages()[ , "Package"])]    # Extract not installed packages
if(length(notInstalled)) install.packages(notInstalled)
lapply(myPackages, require, character.only = TRUE)
source("function.R")  #Functions used in the script
setwd(dir = "C:/Users/worms/Dropbox/PhD/PhD-Scripts/CyclicPeptidePipeline")
source("function.R")  #Functions used in the script
## In progress
libChar = list(frontPattern = "TGGCTTCATTGCGAGCAAT",
backPattern = "TGTCTGTCTTACG",
shortPeptideSize = 12,
largePeptideSize = 24)
frontPattern = libChar$frontPattern
backPattern = libChar$backPattern
fileName = "D:/2022.06.07 Drift Seq/90-666155004b/00_fastq/Periplasmic-NNB-Gen-1-LB_R1_001.fastq"
fileName = "D:/2022.06.07 Drift Seq/90-666155004b/00_fastq/Periplasmic-NNB-Gen-1-LB_R1_001.fastq.gz"
# I first need to get a connection established.
# open the connection
stream <- FastqStreamer(fileName)
dnaSeq <- yield(stream)
fileName2 = "D:/2022.06.07 Drift Seq/90-666155004b/00_fastq/Periplasmic-NNB-Gen-1-LB_R1_001.fastq"
proc.time()
ptm <- proc.time()
stream <- FastqStreamer(fileName)
test <- yield(stream)
close(stream)
proc.time - ptm
ptm
proc.time() - ptm
ptm <- proc.time()
stream <- FastqStreamer(fileName)
test <- yield(stream)
close(stream)
proc.time() - ptm
ptm <- proc.time()
stream <- FastqStreamer(fileName2)
test <- yield(stream)
close(stream)
proc.time() - ptm
fileName
paste(libChar$largePeptideSize," AA peptide fw")
paste(libChar$largePeptideSize,"AA peptide fw")
extract.peptides.fastq <- function(fileName, destination, libChar) {
frontPattern = libChar$frontPattern
backPattern = libChar$backPattern
# Load a fastQ.gz file with the peptides. The files are too big to be used
# entirely, so I'll have to use FastqStremer. .gz compressed files actually process faster than .fastq files.
# I first need to get a connection established.
# open the connection
stream <- FastqStreamer(fileName)
on.exit(close(stream))
i = 1
ptm = proc.time()
dnaSeq <- yield(stream)
while(length(dnaSeq) > 0){
print(i)
print(proc.time() - ptm)
i = i+1
### Fix that
# Filter the one that are way too small (<145 bp out of 150, about 0.5% of seq for
# NNK7)
dnaSeq <- yield(stream)
dnaSeq = dnaSeq[width(dnaSeq) > 145]
# Convert to a DNAStringSet
dnaSeq = sread(dnaSeq)
# Get all the sequence that match the fwd pattern for intein
fwdDnaSeq <- dnaSeq[grepl(pattern = frontPattern, dnaSeq %>%
as.character())]
# I will subset the NNK7 and NNK7
fwdShortSeq = fwdDnaSeq[grepl(pattern = "^TGCA(.)*", fwdDnaSeq %>%
as.character())]
fwdLongSeq = fwdDnaSeq[grepl(pattern = "^AAAA(.)*", fwdDnaSeq %>%
as.character())]
# And get the sequence of the peptides
fwdShortPep = extract.peptide(dnaSeq = fwdShortSeq,
regexPattern = frontPattern,
pepSize = 12)
fwdLongPep = extract.peptide(dnaSeq = fwdLongSeq,
regexPattern = frontPattern,
pepSize = 24)
# Get all the sequence that match the rev pattern for intein and take their reverse
# complement
revDnaSeq = dnaSeq[grepl(pattern = reverseComplement(libChar$backPattern), dnaSeq %>%
as.character())] %>%
reverseComplement()
#Remove those that do not contain fronPattern or backPattern
revDnaSeq = revDnaSeq[grepl(pattern = frontPattern, revDnaSeq %>%
as.character())]
revDnaSeq = revDnaSeq[grepl(pattern = backPattern, revDnaSeq %>%
as.character())]
# I do not have a barcode but I can get the size of the peptide by looking at the
# intein sequence anyway#Take their reverse complement: problem, we don't get
# barcode on those reads
frontPos = str_locate(revDnaSeq, frontPattern)[,2]+1
backPos = str_locate(revDnaSeq, backPattern)[,1]-1
makeSense <- frontPos < backPos #Check the back is after the front
revPeptide = subseq(x = revDnaSeq[makeSense],
start =  frontPos[makeSense],
end = backPos[makeSense])
revShortPep = revPeptide[width(revPeptide) == libChar$shortPeptideSize]
revLongPep = revPeptide[width(revPeptide) == libChar$largePeptideSize]
# I'll store all the sequence in a ShortRead object
fwdLongPep = ShortRead(sread = fwdLongPep, id = BStringSet(rep(paste(libChar$largePeptideSize,"AA peptide fw"),
length(fwdLongPep))))
revLongPep = ShortRead(sread = revLongPep, id = BStringSet(rep(paste(libChar$largePeptideSize,"AA peptide rv"),
length(revLongPep))))
longPep <- append(fwdLongPep, revLongPep)
fwdShortPep = ShortRead(sread = fwdShortPep, id = BStringSet(rep(paste(libChar$shortPeptideSize,"AA peptide fw"),
length(fwdShortPep))))
revShortPep = ShortRead(sread = revShortPep, id = BStringSet(rep(paste(libChar$shortPeptideSize,"AA peptide rv"),
length(revShortPep))))
shortPep <- append(fwdShortPep, revShortPep)
writeFasta(shortPep,
file.path(destination,
gsub(basename(fileName),
pattern = ".fastq",
replacement = paste("_peptide",
libChar$shortPeptideSize,
".fa", sep=""))),
mode = "a")  # The mode append it to a file if existing
writeFasta(longPep,
file.path(destination,
gsub(basename(fileName),
pattern = ".fastq",
replacement = paste("_peptide",
libChar$longPeptideSize,
".fa", sep=""))),
mode = "a")
}
}
libChar = list(frontPattern = "TGGCTTCATTGCGAGCAAT",
backPattern = "TGTCTGTCTTACG",
shortPeptideSize = 12,
largePeptideSize = 24)
fileName = "D:/2022.06.07 Drift Seq/90-666155004b/00_fastq/NNK/Cytoplasmic-NNK-Gen-1-LB_R1_001.fastq.gz"
libChar = list(frontPattern = "TGGCTTCATTGCGAGCAAT",
backPattern = "TGTCTGTCTTACG",
shortPeptideSize = 12,
largePeptideSize = 24)
extract.peptides.fastq(fileName,
destination = "D:/2022.06.07 Drift Seq/90-666155004b/00_fastq/test")
extract.peptides.fastq(fileName,
destination = "D:/2022.06.07 Drift Seq/90-666155004b/00_fastq/test",
libChar = libChar)
reverseComplement("AAAAA")
?reverseComplement
extract.peptides.fastq <- function(fileName, destination, libChar) {
frontPattern = libChar$frontPattern
backPattern = libChar$backPattern
# Load a fastQ.gz file with the peptides. The files are too big to be used
# entirely, so I'll have to use FastqStremer. .gz compressed files actually process faster than .fastq files.
# I first need to get a connection established.
# open the connection
stream <- FastqStreamer(fileName)
on.exit(close(stream))
i = 1
ptm = proc.time()
dnaSeq <- yield(stream)
while(length(dnaSeq) > 0){
print(i)
print(proc.time() - ptm)
i = i+1
### Fix that
# Filter the one that are way too small (<145 bp out of 150, about 0.5% of seq for
# NNK7)
dnaSeq <- yield(stream)
dnaSeq = dnaSeq[width(dnaSeq) > 145]
# Convert to a DNAStringSet
dnaSeq = sread(dnaSeq)
# Get all the sequence that match the fwd pattern for intein
fwdDnaSeq <- dnaSeq[grepl(pattern = frontPattern, dnaSeq %>%
as.character())]
# I will subset the NNK7 and NNK7
fwdShortSeq = fwdDnaSeq[grepl(pattern = "^TGCA(.)*", fwdDnaSeq %>%
as.character())]
fwdLongSeq = fwdDnaSeq[grepl(pattern = "^AAAA(.)*", fwdDnaSeq %>%
as.character())]
# And get the sequence of the peptides
fwdShortPep = extract.peptide(dnaSeq = fwdShortSeq,
regexPattern = frontPattern,
pepSize = 12)
fwdLongPep = extract.peptide(dnaSeq = fwdLongSeq,
regexPattern = frontPattern,
pepSize = 24)
# Get all the sequence that match the rev pattern for intein and take their reverse
# complement
revDnaSeq = dnaSeq[grepl(pattern = libChar$backPattern %>%
DNAString() %>%
reverseComplement(),
dnaSeq %>%
as.character())] %>%
reverseComplement()
#Remove those that do not contain fronPattern or backPattern
revDnaSeq = revDnaSeq[grepl(pattern = frontPattern, revDnaSeq %>%
as.character())]
revDnaSeq = revDnaSeq[grepl(pattern = backPattern, revDnaSeq %>%
as.character())]
# I do not have a barcode but I can get the size of the peptide by looking at the
# intein sequence anyway#Take their reverse complement: problem, we don't get
# barcode on those reads
frontPos = str_locate(revDnaSeq, frontPattern)[,2]+1
backPos = str_locate(revDnaSeq, backPattern)[,1]-1
makeSense <- frontPos < backPos #Check the back is after the front
revPeptide = subseq(x = revDnaSeq[makeSense],
start =  frontPos[makeSense],
end = backPos[makeSense])
revShortPep = revPeptide[width(revPeptide) == libChar$shortPeptideSize]
revLongPep = revPeptide[width(revPeptide) == libChar$largePeptideSize]
# I'll store all the sequence in a ShortRead object
fwdLongPep = ShortRead(sread = fwdLongPep, id = BStringSet(rep(paste(libChar$largePeptideSize,"AA peptide fw"),
length(fwdLongPep))))
revLongPep = ShortRead(sread = revLongPep, id = BStringSet(rep(paste(libChar$largePeptideSize,"AA peptide rv"),
length(revLongPep))))
longPep <- append(fwdLongPep, revLongPep)
fwdShortPep = ShortRead(sread = fwdShortPep, id = BStringSet(rep(paste(libChar$shortPeptideSize,"AA peptide fw"),
length(fwdShortPep))))
revShortPep = ShortRead(sread = revShortPep, id = BStringSet(rep(paste(libChar$shortPeptideSize,"AA peptide rv"),
length(revShortPep))))
shortPep <- append(fwdShortPep, revShortPep)
writeFasta(shortPep,
file.path(destination,
gsub(basename(fileName),
pattern = ".fastq",
replacement = paste("_peptide",
libChar$shortPeptideSize,
".fa", sep=""))),
mode = "a")  # The mode append it to a file if existing
writeFasta(longPep,
file.path(destination,
gsub(basename(fileName),
pattern = ".fastq",
replacement = paste("_peptide",
libChar$longPeptideSize,
".fa", sep=""))),
mode = "a")
}
}
extract.peptides.fastq(fileName,
destination = "D:/2022.06.07 Drift Seq/90-666155004b/00_fastq/test",
libChar = libChar)
libCharNNB = list(frontPattern = "ATCATTGTCCATAAC",
backPattern = "TGCATCAGTGGAGAT",
shortPeptideSize = 18,
largePeptideSize = 30)
fileName = "D:/2022.06.07 Drift Seq/90-666155004b/00_fastq/Periplasmic-NNB-Gen-1-LB_R1_001.fastq.gz"
libCharNNK = list(frontPattern = "TGGCTTCATTGCGAGCAAT",
backPattern = "TGTCTGTCTTACG",
shortPeptideSize = 12,
largePeptideSize = 24)
libCharNNB = list(frontPattern = "ATCATTGTCCATAAC",
backPattern = "TGCATCAGTGGAGAT",
shortPeptideSize = 18,
largePeptideSize = 30)
extract.peptides.fastq(fileName,
destination = "D:/2022.06.07 Drift Seq/90-666155004b/00_fastq/test",
libChar = libCharNNB)
fileList <- list.files("D:/2022.06.07 Drift Seq/90-666155004b/00_fastq/") %>%  #Get files from directory
grep(pattern = ".fastq.gz$", ., value = TRUE) %>% #only the .Fastq
grep(pattern = "NNB", ., value = TRUE)  #that have NNK in the name
fileList
directory ="D:/2022.06.07 Drift Seq/90-666155004b/00_fastq/"
libCharNNB = list(frontPattern = "ATCATTGTCCATAAC",
backPattern = "TGCATCAGTGGAGAT",
shortPeptideSize = 18,
largePeptideSize = 30)
directory ="D:/2022.06.07 Drift Seq/90-666155004b/00_fastq/"
fileList = list.files("D:/2022.06.07 Drift Seq/90-666155004b/00_fastq/")
fileList <- list.files("D:/2022.06.07 Drift Seq/90-666155004b/00_fastq/") %>%  #Get files from directory
grep(pattern = ".fastq.gz$", ., value = TRUE) %>% #only the .Fastq
grep(pattern = "NNB", ., value = TRUE)  #that have NNK in the name
fileList
for(i in seq_along(fileList)){ #Run the extraction script on all the fastq NNK files
extract.peptides.fastq(fileName = file.path(directory,fileList[i]), destination = file.path(directory,"Destination"), libChar =  libCharNNB)
}
file.path(directory,"Destination")
libCharNNB = list(frontPattern = "ATCATTGTCCATAAC",
backPattern = "TGCATCAGTGGAGAT",
shortPeptideSize = 18,
largePeptideSize = 30)
directory ="D:/2022.06.07 Drift Seq/90-666155004b/00_fastq"
fileList <- list.files("D:/2022.06.07 Drift Seq/90-666155004b/00_fastq/") %>%  #Get files from directory
grep(pattern = ".fastq.gz$", ., value = TRUE) %>% #only the .Fastq
grep(pattern = "NNB", ., value = TRUE)  #that have NNK in the name
for(i in seq_along(fileList)){ #Run the extraction script on all the fastq NNK files
extract.peptides.fastq(fileName = file.path(directory,fileList[i]), destination = file.path(directory,"Destination"), libChar =  libCharNNB)
}
test <- readFasta(file.path(directory,"Periplasmic-NNB-Gen-5-Glu_R1_001_peptide.fa"))
test <- readFasta(file.path(directory,"Destination","Periplasmic-NNB-Gen-5-Glu_R1_001_peptide.fa"))
test
test %>% sread()
test <- sread(test)
table(test)
alphabetFrequency(test)
alphabetByCycle(test)
