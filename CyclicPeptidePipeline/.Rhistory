growth.param[j, "lag"] <- coef(fit)[4]
growth.param[j, "wellID"] <- splitted.data[[j]]$wellID[1]
growth.param[j, "wellName"] <- splitted.data[[j]]$wellName[1]
}
splitted.data <- multisplit(data_frame, c("wellID"))  #Split the data in a list
library(growthrates)
splitted.data <- multisplit(data_frame, c("wellID"))  #Split the data in a list
growth.param <- data.frame(wellID = character(), wellName = character(), mumax = numeric(),
lag = numeric())
## TODO: Replace this with apply() function
for (j in 1:length(splitted.data)) {
fit <- fit_easylinear(splitted.data[[j]]$time, splitted.data[[j]]$OD)
growth.param[j, "mumax"] <- coef(fit)[3]
growth.param[j, "lag"] <- coef(fit)[4]
growth.param[j, "wellID"] <- splitted.data[[j]]$wellID[1]
growth.param[j, "wellName"] <- splitted.data[[j]]$wellName[1]
}
growth.param <- growth.param %>%
mutate(wellID = as.factor(wellID)) %>%
mutate(wellName = as.factor(wellName))
ggplot(growth.param %>%
mutate(wellName = as.character(wellName)) %>%
filter(wellName != "blank") %>%
filter(wellName != "LB") %>%
mutate(wellName = as.factor(wellName)), aes(x = wellName, y = mumax)) +
geom_boxplot() + geom_jitter()
ggplot(data_frame %>%
filter(strain != "NA") %>%
filter(wellName != "bSW069") %>%
mutate(time = time/60) %>%
filter(time < 600), aes(x = time, y = OD, color = wellName)) + labs(title = "Growth of E.coli with the various barcoding peptides") +
xlab("Time (min)") + ylab("OD600") + geom_smooth()
ggplot(data_frame %>%
filter(strain != "NA") %>%
filter(wellName != "bSW069") %>%
mutate(time = time/60)
, aes(x = time, y = OD, color = wellName)) + labs(title = "Growth of E.coli with the various barcoding peptides") +
xlab("Time (min)") + ylab("OD600") + geom_smooth()
library(dyplr)
library(diplr)
library(tidyverse)
lists <- readxl::read_xlsx("DM_interaction.xlsx")
setwd(dir = "C:/Users/worms/Dowloads")
lists <- readxl::read_xlsx("DM_interaction.xlsx")
getwd()
setwd(dir = "C:/Users/worms/Dowloads")
lists <- readxl::read_xlsx("C:/Users/worms/Dowloads/DM_interaction.xlsx")
lists <- readxl::read_xlsx("C:/Users/worms/Downloads/DM_interaction.xlsx")
?matrix
?data.frame
?matrix
lists$Index
lists$GRN
matrix <- lists
seq_len(lists)
seq_along(lists)
seq_along(lists$Index)
for(i in seq_along(lists)){
for(j in seq_along(lists$Index)){
matrix[i,j] <-ifelse(lists$Index[j] %in% lists[i], TRUE, FALSE)
}
}
lists[2]
lists[200]
for(i in 2:ncol(lists)){
for(j in seq_along(lists$Index)){
matrix[i,j] <-ifelse(lists$Index[j] %in% lists[i], TRUE, FALSE)
}
}
lists$Index[j] %in% lists[i]
lists$Index[j] %in% lists[2]
lists$Index[j] %in% lists[3]
lists$Index[j] %in% lists[4]
lists$Index[1]
lists$Index[j] %in% lists["NELL1"]
lists["NELL1"]
P49639 %>% lists["NELL1"]
"P49639" %>% lists["NELL1"]
"P49639" %in% lists["NELL1"]
lists["NELL1"][2]
lists["NELL1"]
lists["NELL1"][,2]
lists["NELL1"][2,]
lists["NELL1"][2,] in lists["NELL1"]
View(lists)
data.matrix <- lists
data.matrix[2,4]
data.matrix[2,4] <- FALSE
?data.frame
data.matrix <- as.matrix(data.matrix)
data.matrix
as.matrix()
?as.matrix()
data.matrix <- as.matrix(lists, dimnames(lists$Index))
lists$Index
lists$Index %>% c()
lists$Index %>% c() %>% length()
lists$Index %>% c(,"test") %>% length()
lists$Index %>% c(.,"test") %>% length()
lists$Index %>% c(.,"test")
lists[1]
data.matrix <- as.matrix(lists, dimnames(lists[1]))
data.matrix <- lists
data.matrix <- as.matrix(lists, dimnames(c(lists[1], colnames(lists)))
)
data.matrix <- as.matrix(lists)
for(i in 2:ncol(lists)){
for(j in seq_along(lists$Index)){
matrix[i,j] <-ifelse(lists$Index[j] %in% lists[i], TRUE, FALSE)
}
}
dimnames(lists)
rownames(lists) <- lists$Index
dimnames(lists)
lists <- readxl::read_xlsx("C:/Users/worms/Downloads/DM_interaction.xlsx")
dim.names <- dimnames(lists)
dim.names
dim.names[[1]]
dim.names[[1]] <- lists$Index
dim.names
?matrix
data.matrix <- (data = NA, nrow = nrow(lists) , ncol = ncol(lists)-1, ncol = 1, byrow = FALSE,
dimnames = dim.names)
nrow(lists)
ncol = ncol(lists)-1
ncol(lists)-1
data.matrix <- matrix(data = NA, nrow = nrow(lists), ncol = ncol(lists)-1, dimnames = dim.names)
dim.names <- dimnames(lists)
data.matrix <- matrix(data = NA, nrow = nrow(lists), ncol = ncol(lists)-1, dimnames = dim.names)
len(dim.names)
length(dim.names)
lists$Index[2:nrow(lists)]
dim.names <- dimnames(lists)
dim.names[[1]] <- lists$Index[2:nrow(lists)]
data.matrix <- matrix(data = NA, nrow = nrow(lists), ncol = ncol(lists)-1, dimnames = dim.names)
dim.names <- dimnames(lists)
dim.names[[1]] <- lists$Index[2:nrow(lists)]
dim.names[[1]] <- lists$Index[1:nrow(lists)]
dim.names <- dimnames(lists)
dim.names[[1]] <- lists$Index[1:nrow(lists)]
dim.names[[2]] <- dim.names[[2]][-1]
data.matrix <- matrix(data = NA, nrow = nrow(lists), ncol = ncol(lists)-1, dimnames = dim.names)
lists$Index[1]
#Populate the matrix
for(i in seq_along(nrow(data.matrix))){
for(j in seq_along(ncol(data.matrix))){
data.matrix[i,j] <- lists$Index[1] %in% lists[j+1]
}
}
data.matrix
View(data.matrix)
View(data.matrix)
nrow(data.matrix)
nrow(data.matrix) %>% seq_along()
library(tidyverse)
nrow(data.matrix) %>% seq_along()
nrow(data.matrix) %>% seq_len()
#Populate the matrix
for(i in seq_len(nrow(data.matrix))){
for(j in seq_len(ncol(data.matrix))){
data.matrix[i,j] <- lists$Index[1] %in% lists[j+1]
}
}
data.matrix[,"EFEMP1"]
lists["EFEMP1"]
x <- "O00555
"
x <- "O00555"
y <- "EFEMP1"
x %in% lists[y]
x %in% as.list(lists[y])
as.list(lists[y])
x %in% lists
View(lists)
lists[y][1]
lists[y][[1]]
lists[y][[1]][1]
x %in% lists[y][[1]]
#Populate the matrix
for(i in seq_len(nrow(data.matrix))){
for(j in seq_len(ncol(data.matrix))){
data.matrix[i,j] <- lists$Index[1] %in% lists[j+1][[1]]
}
}
#Populate the matrix
for(i in seq_len(nrow(data.matrix))){
for(j in seq_len(ncol(data.matrix))){
data.matrix[i,j] <- lists$Index[i] %in% lists[j+1][[1]]
}
}
write.csv(data.matrix, file = "DM_matrix.csv")
write.csv(data.matrix, file = "C:/Users/worms/Downloads/DM_matrix.csv")
data.df <- data.frame(protName = as.character(),
protInteractor = as.list(),
interactorNumber = as.numeric())
data.df <- data.frame(protInterest = as.character(),
protInteractor = as.character())
seq_len(lists)[-1]
seq_along(lists)[-1]
for(i in seq_len(lists$Index)){
for(j in seq_along(lists)[-1]){
if(lists$Index[i] %in% lists[j][[1]]){
data.fr <- rbind(data.frame,c(lists$Index[i],colnames(lists)[j]))
}
}
}
seq_along(lists$Index)
for(i in seq_along(lists$Index)){
for(j in seq_along(lists)[-1]){
if(lists$Index[i] %in% lists[j][[1]]){
data.fr <- rbind(data.frame,c(lists$Index[i],colnames(lists)[j]))
}
}
}
for(i in seq_along(lists$Index)){
for(j in seq_along(lists)[-1]){
if(lists$Index[i] %in% lists[j][[1]]){
data.df <- rbind(data.df,
c(lists$Index[i],colnames(lists)[j]))
}
}
}
data.df <- data.frame(protInterest = as.character(),
protInteractor = as.character())
?rbind
for(i in seq_along(lists$Index)){
for(j in seq_along(lists)[-1]){
if(lists$Index[i] %in% lists[j][[1]]){
data.df <- rbind(data.df,
c(lists$Index[i],colnames(lists)[j]))
}
}
}
data.df <- data.frame(protInterest = as.character(),
protInteractor = as.character())
c(lists$Index[1],colnames(lists)[1]) -> t
t
rbind(data.df, t)
rbind(t, data.df)
rbind(data.df, data.frame(t))
data.df
colnames(data.df) <- c("protInterest","protInteractor")
data.df
data.df <- data.frame(protInterest = as.character(),
protInteractor = as.character())
for(i in seq_along(lists$Index)){
for(j in seq_along(lists)[-1]){
if(lists$Index[i] %in% lists[j][[1]]){
data.df <- rbind(data.df,
c(lists$Index[i],colnames(lists)[j]))
}
}
}
colnames(data.df) <- c("protInterest","protInteractor")
head(data.df)
data.df %>% filter(protInterest == "O00555")
table(data.df)
table(data.df) %>% head()
table(data.df) -> x
data.df %>% filter(protInteractor == "ZBTB16")
summary(data.df)
plot(data.df)
source("C:/Users/worms/Desktop/script_Marchese.R", echo=TRUE)
if(!require("tidyverse")) install.packages("tidyverse")
library(tidyverse)
if(!require("tidyverse")) install.packages("tidyverse")
if(!require("readxl")) install.packages("readxl")
library(tidyverse)
if(!require("tidyverse")) install.packages("tidyverse")
if(!require("readxl")) install.packages("readxl")
library(c(tidyverse,readxl))
library(tidyverse)
library(readxl)
folderLoc <- "C:/Users/worms/Downloads/"
## Load up the spreadsheet
lists <- read_xlsx(paste(folderLoc,"DM_interaction.xlsx", sep ="/"))
## Load the prot names as row and colnames
dim.names <- dimnames(lists)
dim.names[[1]] <- lists$Index[1:nrow(lists)]
dim.names[[2]] <- dim.names[[2]][-1]
##Create an empty matrix
data.matrix <- matrix(data = NA, nrow = nrow(lists), ncol = ncol(lists)-1, dimnames = dim.names)
## Load the prot names as row and colnames
dim.names <- dimnames(lists)
dim.names[[1]] <- lists$Index[1:nrow(lists)]
dim.names[[2]] <- dim.names[[2]][-1]
##Create an empty matrix
data.matrix <- matrix(data = NA, nrow = nrow(lists), ncol = ncol(lists)-1, dimnames = dim.names)
#Populate the matrix
for(i in seq_len(nrow(data.matrix))){
for(j in seq_len(ncol(data.matrix))){
data.matrix[i,j] <- lists$Index[i] %in% lists[j+1][[1]]
}
}
## Save the matrix
write.csv(data.matrix, file = paste(folder.loc,"DM_matrix.csv", sep ="/")
write.csv(data.matrix, file = paste(folderLoc,"DM_matrix.csv", sep ="/"))
paste(folderLoc,"DM_matrix.csv", sep ="/")
folderLoc <- "C:/Users/worms/Downloads"
## Where your file is
folderLoc <- "C:/Users/worms/Downloads"
## Load up the spreadsheet
lists <- read_xlsx(paste(folderLoc,"DM_interaction.xlsx", sep ="/"))
## Load the prot names as row and colnames
dim.names <- dimnames(lists)
dim.names[[1]] <- lists$Index[1:nrow(lists)]
dim.names[[2]] <- dim.names[[2]][-1]
##Create an empty matrix
data.matrix <- matrix(data = NA, nrow = nrow(lists), ncol = ncol(lists)-1, dimnames = dim.names)
#Populate the matrix
for(i in seq_len(nrow(data.matrix))){
for(j in seq_len(ncol(data.matrix))){
data.matrix[i,j] <- lists$Index[i] %in% lists[j+1][[1]]
}
}
write.csv(data.matrix, file = paste(folderLoc,"DM_matrix.csv", sep ="/"))
data.df <- data.frame(protInterest = as.character(),
protInteractor = as.character())
for(i in seq_along(lists$Index)){
for(j in seq_along(lists)[-1]){
if(lists$Index[i] %in% lists[j][[1]]){
data.df <- rbind(data.df,
c(lists$Index[i],colnames(lists)[j]))
}
}
}
colnames(data.df) <- c("protInterest","protInteractor")
write.csv(data.df, file = paste(folderLoc,"DM_df.csv", sep ="/"))
data.df %>% filter(protInterest == "O00555")
data.df %>% filter(protInteractor == "ZBTB16")
table(data.df)
lists$Index %in% data.df$protInterest
# Some of your PoI aren't in the interaction list and so aren't in data.df. They are:
vector <- !(lists$Index %in% data.df$protInterest)
vector
lists$Index[vector]
library(platetools)  #Needed to play with plates a bit more easily
num_to_well()
?num_to_well
num_to_well(1:96, plate = 96)
?gsub
num_to_well(1:96, plate = 96) %>%
gsub("10","100",.)
library(tidyverse)  #General tidy stuff
library(readxl)  #Use to read the excel file
library(openxlsx)  #USed to write the tidy data to
library(platetools)  #Needed to play with plates a bit more easily
num_to_well(1:96, plate = 96) %>%
gsub("10","100",.)
num_to_well(1:96, plate = 96) %>%
gsub("10","100",.) %>% str_remove(.,"0")
wellID = num_to_well(1:96, plate = 96) %>%
gsub("0$","00",.)
num_to_well(1:96, plate = 96) %>%
gsub("0$","00",.) %>% # To fix the naming, add a zero after 10, then remove one zero from each well
str_remove(.,"0")
num_to_well(1:384, plate = 384) %>%
gsub("0$","00",.) %>% # To fix the naming, add a zero after 10, then remove one zero from each well
str_remove(.,"0")
?anova
?Anova
??Anova
?aov
library(callr)
install.packages("car")
seq = readFastq(dir = "C:/Users/worms/Documents/2022.06.07 Drift Seq/90-666155004b", pattern="Cytoplasmic-NNK-Gen-1-LB_R1_001.fastq")
setwd(dir="C:/Users/worms/Dropbox/PhD/Scripts/CylicPeptidePipeline")
source("library.R") #Install and/or load needed libraries
source("function.R") #Functions used in the script
seq = readFastq(dir = "C:/Users/worms/Documents/2022.06.07 Drift Seq/90-666155004b", pattern="Cytoplasmic-NNK-Gen-1-LB_R1_001.fastq")
seq = readFastq(dir = "C:/Users/worms/Documents/2022.06.07 Drift Seq/90-666155004b/test", pattern="Cytoplasmic-NNK-Gen-1-LB_R1_001.fastq")
memory.limit()
memory.size()
?FastqSampler
example(FastqStreamer)
con <- file.path("C:\Users\worms\Documents\2022.06.07 Drift Seq\90-666155004b\test","Cytoplasmic-NNK-Gen-1-LB_R1_001.fastq")
con <- file.path("C:/Users/worms/Documents/2022.06.07 Drift Seq/90-666155004b/test","Cytoplasmic-NNK-Gen-1-LB_R1_001.fastq")
con <- file.path("C:/Users/worms/Documents/2022.06.07 Drift Seq/90-666155004b/test","Cytoplasmic-NNK-Gen-1-LB_R1_001.fastq")%>%
FastqFile()
seq = FastqStreamer(con, 100)
con <- file.path("C:/Users/worms/Documents/2022.06.07 Drift Seq/90-666155004b/test","Cytoplasmic-NNK-Gen-1-LB_R1_001.fastq")
seq = FastqStreamer(con, 100)
seq
yield(seq)
dnaseq = yield(seq)
sread(dnaseq)
DNAString = sread(dnaseq)
setwd(dir="C:/Users/worms/Dropbox/PhD/PhD-Scripts/CylicPeptidePipeline")
source("library.R") #Install and/or load needed libraries
source("function.R") #Functions used in the script
con <- file.path("C:/Users/worms/Documents/2022.06.07 Drift Seq/90-666155004b/test","Cytoplasmic-NNK-Gen-1-LB_R1_001.fastq")
seq = FastqStreamer(con, 100)
dnaseq = yield(seq)
DNAString = sread(dnaseq)
DNAString
seq = FastqStreamer(con, 10000)
dnaseq = yield(seq)
DNAString = sread(dnaseq)
DNAString[1]
DNAString[1][1]
DNAString[1][[1]]
DNAString[1][1] %>% as.character()
"TGGCTTCATTGCGAGCAAT" %>% DNAString
"TGGCTTCATTGCGAGCAAT" %in% DNAString
DNAString
DNAString[1]
"TGGCTTCATTGCGAGCAAT" %in% DNAString[1]
"TGGCTTCATTGCGAGCAAT" %in% DNAString[1] %>% as.character()
DNAString[1] %>% as.character()
"TGGCTTCATTGCGAGCAAT" %in% "AAAACGTCTACGACATCGGTGTGGAACGCTATCATAACTTTGCTCTGAAAAATGGCTTCATTGCGAGCAATTGCACGCATAATACGAATGCTACTTGTCTGTCTTACGACACCGAAATCCTGACGGTTGAATATGGCATTCTGCCGATCG"
?grep
showMethods("grep")
test = DNAString[1] %>% as.character()
pat <- "TGGCTTCATTGCGAGCAAT"
grep(pattern = pat, test)
grepl(pattern = pat, test)
as.character(DNAString)
grepl(pattern = pat, DNAString %>% as.character())
grepl(pattern = pat, DNAString %>% as.character()) %>% sum()
fwd = grepl(pattern = pat, DNAString %>% as.character())
fwdString <- DNAString[fwd]
revpat = reverseComplement(pat)
?reverseComplement
revpat = pat %>%
DNAStringSet() %>%
reverseComplement() %>%
as.character()
rev = grepl(pattern = revpat, DNAString %>% as.character())
sum(rev)
revString <- DNAString[rev]
?filter
fwd AND rev
fwd + rev
fwd %>% head(x = )
rev %>% head())
rev %>% head()
rev %>% head(n = 20)
fwd %>% head(n = 20)
fwd && rev
fwd & rev
fwd | rev
(fwd | rev) %>% sum() %>% 10000 - .
(fwd | rev) %>% sum()
!(fwd | rev) %>% sum()
!(fwd | rev)
(!(fwd | rev)) %>% sum()
#get all seq not containing either pat or revpat
restString <- DNAString[(!(fwd | rev))]
restString
restString[1] %>% as.character()
revpat = "GCAATTGCTCGCAAT"
rev = grepl(pattern = revpat, DNAString %>% as.character())
revString <- DNAString[rev]
#get all seq not containing either pat or revpat
restString <- DNAString[(!(fwd | rev))]
restString
restString %>% width()
revString %>% width() %>% plot()
fwdString %>% width() %>% plot()
restString %>% width() %>% plot()
DNAString = DNAString[width(DNAString) > 124]
DNAString %>% width %>% plot(x = )
formatR
library(formatR) #Automatically clean code
tidy_rstudio()
?yield
width(dnaseq)
dnaseq
dnaseq[1:4]
fwdDnaSeq <- dnaseq[fwd]
fwd.dna.seq <- dnaseq[fwd]
dna.seq = yield(seq)
setwd(dir = "C:/Users/worms/Dropbox/PhD/PhD-Scripts/CylicPeptidePipeline")
source("library.R")  #Install and/or load needed libraries
source("function.R")  #Functions used in the script
con <- file.path("C:/Users/worms/Documents/2022.06.07 Drift Seq/90-666155004b/test",
"Cytoplasmic-NNK-Gen-1-LB_R1_001.fastq")
seq = FastqStreamer(con, 10000)
dnaSeq = yield(seq)
width(dnaSeq)
dnaSeq = dnaSeq[width(dnaSeq) > 124]
dnaSeq = dnaSeq[width(dnaSeq) > 149]
dnaSeq = dnaSeq[width(dnaSeq) > 148]
dnaSeq = yield(seq)
dnaSeq = dnaSeq[width(dnaSeq) > 148]
dnaSeq = yield(seq)
dnaSeq = dnaSeq[width(dnaSeq) > 145]
# Get all the sequence that match the fwd pattern for intein
fwdPat "TGGCTTCATTGCGAGCAAT"
# Get all the sequence that match the fwd pattern for intein
fwdPat = "TGGCTTCATTGCGAGCAAT"
fwd = grepl(pattern = pat, dnaseq %>%
sread() %>%
as.character())
fwdDnaSeq <- dnaSeq[fwd]
fwd = grepl(pattern = pat, dnaSeq %>%
sread() %>%
as.character())
fwdDnaSeq <- dnaSeq[fwd]
fwd = grepl(pattern = fwdPat, dnaSeq %>%
sread() %>%
as.character())
fwdDnaSeq <- dnaSeq[fwd]
qaSummary <- qa(con, type="fastq")
report(qaSummary)
report(qaSummary) %>% browseURL()
revpat = "GTCGTAAGACAGACA"
revPat = "GTCGTAAGACAGACA"
rev = grepl(pattern = revPat, dnaSeq %>%
sread() %>%
as.character())
revDnaSeq <- dnaSeq[rev]
